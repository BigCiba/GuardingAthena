"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PanoramaTargetPlugin = void 0;
const tslib_1 = require("tslib");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
// We have to use an actual plugin, because "target" function is applied after config defaults
class PanoramaTargetPlugin {
    apply(compiler) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var _m, _o, _p, _q, _r, _s, _t, _u, _v;
        const { options } = compiler;
        if (options.target !== undefined) {
            throw new Error("'target' option cannot be used with PanoramaTargetWebpackPlugin.");
        }
        options.target = 'es2017';
        // Overriding defaults from https://github.com/webpack/webpack/blob/86ca074290d5b6930c9a85a7eb4d4bd39f0b6509/lib/config/defaults.js
        // "eval" default isn't useful in Panorama
        (_a = options.devtool) !== null && _a !== void 0 ? _a : (options.devtool = false);
        // TODO: Add .xml asset default rule?
        (_b = (_m = options.output).globalObject) !== null && _b !== void 0 ? _b : (_m.globalObject = "new Function('return this')()");
        (_c = (_o = options.output).enabledChunkLoadingTypes) !== null && _c !== void 0 ? _c : (_o.enabledChunkLoadingTypes = []);
        if (options.optimization.splitChunks !== false) {
            (_d = (_p = options.optimization).splitChunks) !== null && _d !== void 0 ? _d : (_p.splitChunks = {});
            (_e = (_q = options.optimization.splitChunks).cacheGroups) !== null && _e !== void 0 ? _e : (_q.cacheGroups = {});
            (_f = (_r = options.optimization.splitChunks.cacheGroups).default) !== null && _f !== void 0 ? _f : (_r.default = false);
            (_g = (_s = options.optimization.splitChunks.cacheGroups).defaultVendors) !== null && _g !== void 0 ? _g : (_s.defaultVendors = false);
        }
        (_h = options.resolve) !== null && _h !== void 0 ? _h : (options.resolve = {});
        // Some modules (i.e. object-inspect) are using "browser" as non-node
        (_j = (_t = options.resolve).conditionNames) !== null && _j !== void 0 ? _j : (_t.conditionNames = ['...']);
        if (options.resolve.conditionNames.includes('...')) {
            options.resolve.conditionNames.push('panorama');
            options.resolve.conditionNames.push('browser');
        }
        (_k = (_u = options.resolve).aliasFields) !== null && _k !== void 0 ? _k : (_u.aliasFields = []);
        options.resolve.aliasFields.push('browser');
        (_l = (_v = options.resolve).mainFields) !== null && _l !== void 0 ? _l : (_v.mainFields = ['...']);
        if (options.resolve.mainFields.includes('...')) {
            options.resolve.mainFields.push('browser');
        }
        // https://github.com/webpack/webpack/blob/86ca074290d5b6930c9a85a7eb4d4bd39f0b6509/lib/WebpackOptionsApply.js#L72
        compiler.hooks.initialize.tap('PanoramaTargetWebpackPlugin', () => {
            new webpack_1.default.LoaderTargetPlugin('panorama').apply(compiler);
        });
    }
}
exports.PanoramaTargetPlugin = PanoramaTargetPlugin;
//# sourceMappingURL=target.js.map