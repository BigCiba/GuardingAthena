"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const posthtml_1 = tslib_1.__importDefault(require("posthtml"));
const esm_1 = require("@posthtml/esm");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const posthtml_plugin_ban_text_nodes_1 = require("./posthtml-plugin-ban-text-nodes");
const posthtml_plugin_load_imports_1 = require("./posthtml-plugin-load-imports");
const posthtml_plugin_panorama_includes_1 = require("./posthtml-plugin-panorama-includes");
async function layoutLoader(source, _map, meta) {
    var _a;
    this.cacheable(false);
    const callback = this.async();
    const plugins = [
        posthtml_plugin_panorama_includes_1.preserveIncludesBefore,
        esm_1.urls(),
        esm_1.imports(),
        posthtml_plugin_panorama_includes_1.preserveIncludesAfter,
        posthtml_plugin_load_imports_1.loadImports(this),
        posthtml_plugin_panorama_includes_1.validateIncludes(this),
        posthtml_plugin_ban_text_nodes_1.banTextNodes(this),
    ];
    try {
        const input = ((_a = meta === null || meta === void 0 ? void 0 : meta.ast) === null || _a === void 0 ? void 0 : _a.type) === 'posthtml' ? meta.ast.root : source;
        const { html } = await posthtml_1.default(plugins).process(input, {
            closingSingleTag: 'slash',
            xmlMode: true,
        });
        this._compilation.hooks.processAssets.tap({ name: 'layout-loader', stage: webpack_1.default.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE }, () => {
            for (const chunk of this._compilation.chunkGraph.getModuleChunks(this._module)) {
                for (const file of chunk.files) {
                    // @ts-expect-error Expected 2 arguments, but got 1.
                    this._compilation.updateAsset(file, new webpack_1.default.sources.RawSource(html));
                }
            }
        });
        callback(null, '');
    }
    catch (error) {
        callback(error);
    }
}
exports.default = layoutLoader;
//# sourceMappingURL=index.js.map