"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pitch = void 0;
const tslib_1 = require("tslib");
const loader_utils_1 = require("loader-utils");
const path_1 = tslib_1.__importDefault(require("path"));
const webpack_1 = tslib_1.__importDefault(require("webpack"));
function pitch() {
    var _a, _b;
    this.cacheable(false);
    this.addDependency(this.resourcePath);
    const options = this.getOptions();
    const filenameTemplate = (_a = options.filename) !== null && _a !== void 0 ? _a : '[path][name].js';
    const filename = loader_utils_1.interpolateName(this, filenameTemplate, { context: this.rootContext });
    const compiler = createCompiler(this, filename, (_b = options.plugins) !== null && _b !== void 0 ? _b : []);
    const callback = this.async();
    compiler.runAsChild((error, entries, compilation) => {
        var _a, _b;
        ((_a = compilation === null || compilation === void 0 ? void 0 : compilation.warnings) !== null && _a !== void 0 ? _a : []).forEach((e) => this.emitWarning(e));
        ((_b = compilation === null || compilation === void 0 ? void 0 : compilation.errors) !== null && _b !== void 0 ? _b : []).forEach((e) => this.emitError(e));
        if (error) {
            callback(error);
        }
        else if (entries.length > 0) {
            const file = [...entries[0].files][0];
            callback(null, `module.exports = __webpack_public_path__ + ${JSON.stringify(file)};`);
        }
        else {
            callback(null, '');
        }
    });
}
exports.pitch = pitch;
function createCompiler(loader, filename, pluginsOption) {
    const { _compilation: oldCompilation, _compiler: oldCompiler } = loader;
    const outputOptions = { ...oldCompilation.outputOptions, filename };
    const allowedPlugins = new Set(pluginsOption.filter((x) => typeof x === 'string'));
    const plugins = [
        ...oldCompiler.options.plugins.filter((p) => allowedPlugins.has(p.constructor.name)),
        ...pluginsOption.filter((x) => typeof x !== 'string'),
    ];
    const compilerName = path_1.default.relative(oldCompiler.context, loader.resourcePath);
    // @ts-expect-error Type 'WebpackPluginInstance' is not assignable to type 'Plugin'.
    const childCompiler = oldCompilation.createChildCompiler(compilerName, outputOptions, plugins);
    const { rawRequest } = loader._module;
    new webpack_1.default.EntryPlugin(loader.context, rawRequest, 'main').apply(childCompiler);
    return childCompiler;
}
//# sourceMappingURL=entry-loader.js.map