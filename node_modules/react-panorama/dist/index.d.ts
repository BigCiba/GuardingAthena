import { DependencyList, ClassAttributes, ReactNode, ExoticComponent, ReactElement, ReactPortal } from "react";

/**
 * Executes `callback` every time `eventName` game event is fired.
 */
declare function useGameEvent<T extends string | object>(
    eventName: (T extends string ? T : string) | keyof CustomGameEventDeclarations | keyof GameEventDeclarations,
    callback: (event: NetworkedData<GameEvents.InferGameEventType<T, object>>) => void,
    dependencies?: DependencyList,
): void;
/**
 * Executes `callback` every time `event` UI event is fired.
 */
declare function useRegisterForUnhandledEvent(
    event: string,
    callback: (...args: any[]) => void,
    dependencies?: DependencyList,
): void;
/**
 * Gets the value of a key in a custom NetTable and updates component when it changes.
 */
declare function useNetTableKey<
    TName extends keyof CustomNetTableDeclarations,
    T extends CustomNetTableDeclarations[TName],
    K extends keyof T
>(name: TName, key: K): NetworkedData<T[K]>;
/**
 * Gets all values in a custom NetTable and updates component when it changes.
 */
declare function useNetTableValues<
    TName extends keyof CustomNetTableDeclarations,
    T extends CustomNetTableDeclarations[TName]
>(name: TName): NetworkedData<T>;

declare type EventHandler<T extends PanelBase> = (panel: T) => void;
interface PanelAttributes<T extends PanelBase = Panel> extends ClassAttributes<T> {
    children?: ReactNode;
    dangerouslyCreateChildren?: string;
    dialogVariables?: Record<string, string | number | Date>;
    id?: string;
    className?: string;
    style?: Partial<VCSSStyleDeclaration>;
    hittest?: boolean;
    hittestchildren?: boolean;
    acceptsfocus?: boolean;
    tabindex?: number | "auto";
    inputnamespace?: string;
    draggable?: boolean;
    enabled?: boolean;
    visible?: boolean;
    onload?: EventHandler<T>;
    onfocus?: EventHandler<T>;
    onactivate?: EventHandler<T>;
    onmouseactivate?: EventHandler<T>;
    ondblclick?: EventHandler<T>;
    oncontextmenu?: EventHandler<T>;
    onmouseover?: EventHandler<T>;
    onmouseout?: EventHandler<T>;
    onmovedown?: EventHandler<T>;
    onmoveleft?: EventHandler<T>;
    onmoveright?: EventHandler<T>;
    onmoveup?: EventHandler<T>;
    oncancel?: EventHandler<T>;
    ontabforward?: EventHandler<T>;
}
interface LabelLikeAttributes<T extends Panel> extends PanelAttributes<T> {
    /**
     * Note: Using this attribute is the same as assigning `text` property on a Label panel - it does
     * not localize strings and ignores dialog variables. If you need the behavior of XML attribute,
     * use `localizedText` instead.
     */
    text?: string | number;
    localizedText?: string;
    html?: boolean;
}
interface LabelAttributes extends LabelLikeAttributes<LabelPanel> {
    allowtextselection?: boolean;
}
interface ImageAttributes<T extends ImagePanel = ImagePanel> extends PanelAttributes<T> {
    src?: string;
    scaling?: ScalingFunction;
}
interface DOTAAbilityImageAttributes extends ImageAttributes<AbilityImage> {
    abilityname?: string;
    abilityid?: number;
    contextEntityIndex?: AbilityEntityIndex;
    /** @default false */
    showtooltip?: boolean;
}
interface DOTAItemImageAttributes extends ImageAttributes<ItemImage> {
    itemname?: string;
    contextEntityIndex?: ItemEntityIndex;
    /** @default true */
    showtooltip?: boolean;
}
interface DOTAHeroImageAttributes extends ImageAttributes<HeroImage> {
    heroname?: string;
    heroid?: HeroID;
    heroimagestyle?: "icon" | "portrait" | "landscape";
    usedefaultimage?: boolean;
}
interface DOTACountryFlagImageAttributes extends ImageAttributes {
    country_code?: string;
}
interface DOTALeagueImageAttributes extends ImageAttributes<LeagueImage> {
    leagueid?: number;
    /** @default 'Banner' */
    leagueimagestyle?: "Banner" | "Square" | "LargeIcon";
}
interface EconItemImageAttributes extends ImageAttributes {
    itemdef: number;
}
interface AnimatedImageStripAttributes extends ImageAttributes {
    frametime?: string;
    defaultframe?: number;
    animating?: boolean;
}
interface DOTAEmoticonAttributes extends AnimatedImageStripAttributes {
    emoticonid?: number;
    alias?: string;
}
declare type MovieAutoPlay = "off" | "onload" | "onfocus";
interface MovieAttributes extends PanelAttributes<MoviePanel> {
    src?: string;
    repeat?: boolean;
    controls?: Parameters<MoviePanel["SetControls"]>[0];
    title?: string;
    /** @default 'onload' */
    autoplay?: MovieAutoPlay;
}
interface DOTAHeroMovieAttributes extends PanelAttributes<HeroMovie> {
    heroid?: HeroID;
    heroname?: string;
    persona?: any;
    /** @default 'off' */
    autoplay?: MovieAutoPlay;
}
interface DOTAScenePanelAttributes extends PanelAttributes<ScenePanel> {
    unit?: string;
    "activity-modifier"?: string;
    map?: string;
    camera?: string;
    light?: string;
    pitchmin?: number;
    pitchmax?: number;
    yawmin?: number;
    yawmax?: number;
    allowrotation?: boolean;
    rotateonhover?: boolean;
    rotateonmousemove?: boolean;
    antialias?: boolean;
    panoramasurfaceheight?: number;
    panoramasurfacewidth?: number;
    panoramasurfacexml?: string;
    particleonly?: boolean;
    renderdeferred?: boolean;
    rendershadows?: boolean;
}
interface DOTAEconItemAttributes extends PanelAttributes<EconItemPanel> {
    itemdef: number;
    itemstyle?: number;
}
interface ProgressBarAttributes extends PanelAttributes<ProgressBar> {
    value?: number;
    min?: number;
    max?: number;
}
interface CircularProgressBarAttributes extends PanelAttributes<CircularProgressBar> {
    value?: number;
    min?: number;
    max?: number;
}
interface ProgressBarWithMiddleAttributes extends PanelAttributes<ProgressBarWithMiddle> {
    lowervalue?: number;
    uppervalue?: number;
    min?: number;
    max?: number;
}
interface DOTAUserNameAttributes extends PanelAttributes<UserName> {
    steamid?: string | "local";
}
interface DOTAUserRichPresenceAttributes extends PanelAttributes<UserRichPresence> {
    steamid?: string | "local";
}
interface DOTAAvatarImageAttributes extends PanelAttributes<AvatarImage> {
    steamid?: string | "local";
    nocompendiumborder?: boolean;
    lazy?: boolean;
}
interface CountdownAttributes extends PanelAttributes<CountdownPanel> {
    startTime?: number;
    endTime: number;
    /** @default 1 */
    updateInterval?: number;
    /** @default 'countdown_time' */
    timeDialogVariable?: string;
}
interface TextButtonAttributes extends LabelLikeAttributes<TextButton> {}
interface ToggleButtonAttributes extends LabelLikeAttributes<ToggleButton> {
    selected?: boolean;
    onselect?: EventHandler<RadioButton>;
    ondeselect?: EventHandler<RadioButton>;
}
interface RadioButtonAttributes extends PanelAttributes<RadioButton> {
    group?: string;
    text?: string;
    html?: boolean;
    selected?: boolean;
    onselect?: EventHandler<RadioButton>;
    ondeselect?: EventHandler<RadioButton>;
}
interface TextEntryAttributes extends PanelAttributes<TextEntry> {
    multiline?: boolean;
    placeholder?: string;
    maxchars?: number;
    textmode?: "normal" | "password" | "numeric" | "numericpassword";
    text?: string;
    ontextentrychange?: EventHandler<TextEntry>;
    oninputsubmit?: EventHandler<TextEntry>;
}
interface NumberEntryAttributes extends PanelAttributes<NumberEntry> {
    value?: number;
    onvaluechanged?: EventHandler<NumberEntry>;
    /** @default 0 */
    min?: number;
    /** @default 1000000 */
    max?: number;
    /** @default 1 */
    increment?: number;
}
interface SliderAttributes<T extends SliderPanel = SliderPanel> extends PanelAttributes<T> {
    style?: never;
    value?: number;
    onvaluechanged?: EventHandler<T>;
    /** @default 0 */
    min?: number;
    /** @default 1 */
    max?: number;
    /**
     * Note: to make slider horizontal it also should have a `HorizontalSlider` class.
     *
     * @default 'vertical'
     */
    direction?: "vertical" | "horizontal";
}
interface SlottedSliderAttributes<T extends SlottedSlider = SlottedSlider> extends SliderAttributes<T> {
    notches?: number;
}
interface DropDownAttributes extends PanelAttributes<DropDown> {
    selected?: string;
    oninputsubmit?: EventHandler<DropDown>;
}
interface CarouselAttributes extends PanelAttributes<CarouselPanel> {
    focus?: "center" | "edge";
    "focus-offset"?: string;
    wrap?: boolean;
    selectionposboundary?: string;
    "panels-visible"?: number;
    clipaftertransform?: boolean;
    AllowOversized?: any;
    "autoscroll-delay"?: string;
    "x-offset"?: string;
}
interface CarouselNavAttributes extends PanelAttributes {
    carouselid?: string;
}
interface DOTAHUDOverlayMapAttributes extends PanelAttributes<HUDOverlayMap> {
    maptexture?: string;
    /** @default 4 */
    mapscale?: number;
    /** @default true */
    mapscroll?: boolean;
    /** @default false */
    fixedoffsetenabled?: boolean;
    fixedOffset?: {
        x: number;
        y: number;
    };
    fixedBackgroundTexturePosition?: {
        size: number;
        x: number;
        y: number;
    };
}
interface HTMLAttributes extends PanelAttributes<HTML> {
    url?: string;
}
interface CustomLayoutPanelAttributes extends PanelAttributes {
    layout: string;
}
interface GenericPanelAttributes extends PanelAttributes {
    type: string;
    [key: string]: any;
}

declare global {
    var Panel: ExoticComponent<PanelAttributes>;
    var Label: ExoticComponent<LabelAttributes>;
    var Image: ExoticComponent<ImageAttributes>;
    var DOTAAbilityImage: ExoticComponent<DOTAAbilityImageAttributes>;
    var DOTAItemImage: ExoticComponent<DOTAItemImageAttributes>;
    var DOTAHeroImage: ExoticComponent<DOTAHeroImageAttributes>;
    var DOTACountryFlagImage: ExoticComponent<DOTACountryFlagImageAttributes>;
    var DOTALeagueImage: ExoticComponent<DOTALeagueImageAttributes>;
    var EconItemImage: ExoticComponent<EconItemImageAttributes>;
    var AnimatedImageStrip: ExoticComponent<AnimatedImageStripAttributes>;
    var DOTAEmoticon: ExoticComponent<DOTAEmoticonAttributes>;
    var Movie: ExoticComponent<MovieAttributes>;
    var DOTAHeroMovie: ExoticComponent<DOTAHeroMovieAttributes>;
    var DOTAScenePanel: ExoticComponent<DOTAScenePanelAttributes>;
    var DOTAEconItem: ExoticComponent<DOTAEconItemAttributes>;
    var ProgressBar: ExoticComponent<ProgressBarAttributes>;
    var CircularProgressBar: ExoticComponent<CircularProgressBarAttributes>;
    var ProgressBarWithMiddle: ExoticComponent<ProgressBarWithMiddleAttributes>;
    var DOTAUserName: ExoticComponent<DOTAUserNameAttributes>;
    var DOTAUserRichPresence: ExoticComponent<DOTAUserRichPresenceAttributes>;
    var DOTAAvatarImage: ExoticComponent<DOTAAvatarImageAttributes>;
    var Countdown: ExoticComponent<CountdownAttributes>;
    var Button: ExoticComponent<PanelAttributes>;
    var TextButton: ExoticComponent<TextButtonAttributes>;
    var ToggleButton: ExoticComponent<ToggleButtonAttributes>;
    var RadioButton: ExoticComponent<RadioButtonAttributes>;
    var TextEntry: ExoticComponent<TextEntryAttributes>;
    var NumberEntry: ExoticComponent<NumberEntryAttributes>;
    var Slider: ExoticComponent<SliderAttributes>;
    var SlottedSlider: ExoticComponent<SlottedSliderAttributes>;
    var DropDown: ExoticComponent<DropDownAttributes>;
    var ContextMenuScript: ExoticComponent<PanelAttributes>;
    var Carousel: ExoticComponent<CarouselAttributes>;
    var CarouselNav: ExoticComponent<CarouselNavAttributes>;
    var DOTAHUDOverlayMap: ExoticComponent<DOTAHUDOverlayMapAttributes>;
    var DOTAMinimap: ExoticComponent<PanelAttributes>;
    var HTML: ExoticComponent<HTMLAttributes>;
    var CustomLayoutPanel: ExoticComponent<CustomLayoutPanelAttributes>;
    /**
     * This element allows to render any unsupported Panorama panel type.
     * All unknown attributes are assumed to be XML properties.
     *
     * @example
     * return (
     *   <GenericPanel
     *     type="DOTABuffList"
     *     showdebuffs={false}
     *     style={{ backgroundColor: 'black' }}
     *   />
     * );
     */
    var GenericPanel: ExoticComponent<GenericPanelAttributes>;
}

/**
 * Render a React element into the layout in the supplied container.
 *
 * See [ReactDOM.render](https://reactjs.org/docs/react-dom.html#render) for more information.
 */
declare function render(element: ReactElement, container: Panel, callback?: () => void): void;
/**
 * Creates a [React Portal](https://reactjs.org/docs/portals.html).
 */
declare function createPortal(children: ReactNode, container: Panel, key?: null | string): ReactPortal;

export {
    AnimatedImageStripAttributes,
    CarouselAttributes,
    CarouselNavAttributes,
    CircularProgressBarAttributes,
    CountdownAttributes,
    CustomLayoutPanelAttributes,
    DOTAAbilityImageAttributes,
    DOTAAvatarImageAttributes,
    DOTACountryFlagImageAttributes,
    DOTAEconItemAttributes,
    DOTAEmoticonAttributes,
    DOTAHUDOverlayMapAttributes,
    DOTAHeroImageAttributes,
    DOTAHeroMovieAttributes,
    DOTAItemImageAttributes,
    DOTALeagueImageAttributes,
    DOTAScenePanelAttributes,
    DOTAUserNameAttributes,
    DOTAUserRichPresenceAttributes,
    DropDownAttributes,
    EconItemImageAttributes,
    GenericPanelAttributes,
    HTMLAttributes,
    ImageAttributes,
    LabelAttributes,
    MovieAttributes,
    MovieAutoPlay,
    NumberEntryAttributes,
    PanelAttributes,
    ProgressBarAttributes,
    ProgressBarWithMiddleAttributes,
    RadioButtonAttributes,
    SliderAttributes,
    SlottedSliderAttributes,
    TextButtonAttributes,
    TextEntryAttributes,
    ToggleButtonAttributes,
    createPortal,
    render,
    useGameEvent,
    useNetTableKey,
    useNetTableValues,
    useRegisterForUnhandledEvent,
};

export as namespace ReactPanorama;
