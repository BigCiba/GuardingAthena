const intervals = new Map();
let nextIntervalId = -100000;
export const setTimeout = (callback, timeout = 0, ...args) => $.Schedule(timeout / 1000, () => callback(...args));
export function setInterval(callback, timeout = 0, ...args) {
    timeout /= 1000;
    nextIntervalId -= 1;
    const intervalId = nextIntervalId;
    const run = () => {
        intervals.set(intervalId, $.Schedule(timeout, run));
        callback(...args);
    };
    intervals.set(intervalId, $.Schedule(timeout, run));
    return intervalId;
}
export const setImmediate = (callback, ...args) => $.Schedule(0, () => callback(...args));
function clearTimer(handle) {
    if (typeof handle === 'number') {
        // $.CancelScheduled throws on expired or non-existent timer handles
        try {
            if (handle < -100000) {
                $.CancelScheduled(intervals.get(handle));
            }
            else {
                $.CancelScheduled(handle);
            }
        }
        catch (_a) { }
    }
}
export { clearTimer as clearTimeout, clearTimer as clearInterval, clearTimer as clearImmediate };
